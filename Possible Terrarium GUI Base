import tkinter as tk
from tkinter import ttk
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
check = 0
auto=1
lights=0
pump=0
timset=1


x_data = [-20, -15, -10, -5, 0]
humid_y = [0, 0, 0, 0, 0]
set_humid = [55, 55, 55, 55, 55]
# light_y = [3, 5, 6, 2, 6]
# set_light = [4, 4, 4, 4, 4]
temp_y = [0, 0, 0, 0, 0]
set_temp = [21, 21, 21, 21, 21]
# moist_y = [5, 4, 5, 8, 1]
# set_moist = [7, 7, 7, 7, 7]
y_data1 = [2, 4, 6, 8, 10]
y_data2 = [1, 3, 5, 7, 9]

# Create the main window
root = tk.Tk()
root.title("Graph and Message Board For Plant")

# Create a frame for the graph
graph_frame = ttk.Frame(root)
graph_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

# Create a figure and axis for the graph
fig = Figure(figsize=(5, 4), dpi=100)
ax = fig.add_subplot(111)

# Create a canvas to display the graph
canvas = FigureCanvasTkAgg(fig, master=graph_frame)
# canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=True)
canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=True)
# Create a frame for the message board
msg_frame = ttk.Frame(root)
msg_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)

# Create a label for the message board
msg_label = ttk.Label(msg_frame, text="Messages:")
msg_label.pack(side=tk.TOP, padx=10, pady=10)

# Create a text box to display messages
msg_text = tk.Text(msg_frame, height=20, width=30, state="normal")
msg_text.pack(side=tk.TOP, fill=tk.BOTH, expand=True)

# Create a button to update the graph
def humid_graph():
    global check
    # Update the data for the second line on the graph
    # if check:
    #     check=0
    #     x_data2 = [1, 2, 3, 4, 5]
    #     y_data2 = [1, 3, 5, 7, 9]
    # else:
    #     check=1
    #     x_data2 = [1, 2, 3, 4, 5]
    #     y_data2 = [0, 2, 4, 6, 8]
    # y_data1 = set_y
    # y_data2 = y
    check=0
    ax.clear()
    
    # Update the graph with the new data
    ax.plot(x_data, set_humid, label='Min Humidity', color='green')
    ax.plot(x_data, humid_y, label='Humidity Levels', color='blue')
    ax.set_xlabel("Minutes Ago", fontsize=14)
    ax.set_ylabel("Data", fontsize=14)
    ax.set_title("Graph", fontsize=16)
    # ax.set_xlim(0, 100)
    ax.set_ylim(50, 60)
    ax.legend()
    canvas.draw()
    # Update the message board with a new message
    msg_text.insert(tk.END, "Graph updated\n")

def temp_graph():
    global check

    check=1
    ax.clear()
    # Update the graph with the new data
    ax.plot(x_data, set_temp, label='Min Temp', color='green')
    ax.plot(x_data, temp_y, label=' Current Temp', color='red')
    ax.set_xlabel("Minutes Ago", fontsize=14)
    ax.set_ylabel("Data", fontsize=14)
    ax.set_title("Graph", fontsize=16)
    # ax.set_xlim(0, 100)
    ax.set_ylim(18, 24)
    ax.legend()
    canvas.draw()
    # Update the message board with a new message
    msg_text.insert(tk.END, "Graph updated\n")

def toggle_mode():
    global auto, lights_button, pump_button, mode_label, msg_text
    if auto:
        auto=0
        lights_button = ttk.Button(root, text="Toggle Lights", command=lambda: [toggle_lights()])
        lights_button.pack(side=tk.TOP, pady=5)

        pump_button = ttk.Button(root, text="Start/Stop Pumping", command=lambda: [toggle_pump()])
        pump_button.pack(side=tk.TOP, pady=5)
        mode_label.config(text="Current Mode: Manual")
        msg_text.delete('1.0', tk.END)
        msg_text.insert(tk.END, "Mode changed to MANUAL.\nToggle mode back to AUTO for \nautomatic plant care to resume\n")

    else:
        auto=1
        lights_button.destroy()
        pump_button.destroy()
        mode_label.config(text="Current Mode: Auto")
        msg_text.delete('1.0', tk.END)
        msg_text.insert(tk.END, "Mode changed to AUTO.\nAutomatic plant care will now resume\n")

def toggle_lights():
    global lights
    if lights:
        lights=0
        GPIO.output(GREEN_PIN, GPIO.LOW)
        GPIO.output(RED_PIN, GPIO.LOW)
        GPIO.output(BLUE_PIN, GPIO.LOW)
    else:
        lights=1
        GPIO.output(GREEN_PIN, GPIO.HIGH)
        GPIO.output(RED_PIN, GPIO.HIGH)
        GPIO.output(BLUE_PIN, GPIO.HIGH)

def toggle_pump():
    if pump:
        pump=0
        RELAY.off()
    else:
        pump=1
        RELAY.on()

# Create a button to update the data and redraw the graph
update_button1 = ttk.Button(root, text="Show Temperature", command=lambda: [temp_graph()])
update_button1.pack(side=tk.BOTTOM, pady=5)

update_button2 = ttk.Button(root, text="Show Humidity", command=lambda: [humid_graph()])
update_button2.pack(side=tk.BOTTOM, pady=5)

update_button3 = ttk.Button(root, text="Show Soil Moisture", command=lambda: [msg_text.insert(tk.END, f"{water_text()}\n")])
update_button3.pack(side=tk.BOTTOM, pady=5)

Data_label = ttk.Label(root, text="Data", font=("Arial", 20))
Data_label.pack(side=tk.BOTTOM, pady=5)

Control_label = ttk.Label(root, text="Controls", font=("Arial", 20))
Control_label.pack(side=tk.TOP, pady=5)

clear_button = ttk.Button(root, text="Clear Text", command=lambda: [msg_text.delete('1.0', tk.END)])
clear_button.pack(side=tk.TOP, pady=5)

mode_button = ttk.Button(root, text="Toggle Mode", command=lambda: [toggle_mode()])
mode_button.pack(side=tk.TOP, pady=5)

mode_label = ttk.Label(root, text="Current Mode: Auto")
mode_label.pack(side=tk.TOP, pady=5)

# update_button4 = ttk.Button(root, text="Show Light Levels", command=lambda: [set_graph(light_y,set_light)])
# update_button4.pack(side=tk.BOTTOM, pady=5)

# Create a function to update the graph with new data
def update_graph():
    # Get new data from a data source
    
    # Clear the previous data from the graph
    ax.clear()
    
    # Update the graph with the new data
    if check:
        ax.plot(x_data, set_humid, label='Min Humidity', color='green')
        ax.plot(x_data, humid_y, label='Humidity Levels', color='blue')
        ax.set_xlabel("Minutes Ago", fontsize=14)
        ax.set_ylabel("Data", fontsize=14)
        ax.set_title("Graph", fontsize=16)
        ax.set_ylim(50, 60)
        ax.legend()
        canvas.draw()
    else:
        ax.plot(x_data, set_temp, label='Min Temp', color='green')
        ax.plot(x_data, temp_y, label=' Current Temp', color='red')
        ax.set_xlabel("Minutes Ago", fontsize=14)
        ax.set_ylabel("Data", fontsize=14)
        ax.set_title("Graph", fontsize=16)
        ax.set_ylim(18, 24)
        ax.legend()
        canvas.draw()

    # Update the message board with a new message
    msg_text.insert(tk.END, "Plant needs no care as of now\n")

    # Call this function again after 1 second
    # root.after(10000, update_graph)

# Start updating the graph
update_graph()

# Start the main loop
# root.mainloop()
def waterpoll(wschannel):
    if GPIO.input(wschannel):
        return True
    else:
        return False

def water_text():
    if GPIO.input(wschannel):
        return "Your plants have plenty of fresh water!"
    else:
        return "Your plants are dry!"
# DA PUMP CODE


def water_plant(relay, seconds):
    relay.on()
    print("Plant is being watered!")
    sleep(seconds)
    print("Watering is finished!")
    relay.off()

def main():
    #time_keeper = TK.TimeKeeper(TK.TimeKeeper.get_current_time())
    if(waterpoll(wschannel) == False):
        print("Watering Initiated!")
        water_plant(RELAY, SECONDS_TO_WATER)


################################################################################
################################################################################

##### THIS IS THE TEMP/HUMIDITY SENSOR AND LIGHTS #####

from classes import Hardware
from classes import TimeKeeper as TK
import RPi.GPIO as GPIO
import time
from time import sleep
import adafruit_dht
import board

#SENSOR SETUP
wschannel = 13
GPIO.setmode(GPIO.BCM)
GPIO.setup(wschannel, GPIO.IN)

#PUMP SETUP
SECONDS_TO_WATER = 10
RELAY = Hardware.Relay(12, False)

RED_PIN=25
BLUE_PIN=26
GREEN_PIN=24
GPIO.setmode(GPIO.BCM)
GPIO.setup(GREEN_PIN,GPIO.OUT)
GPIO.setup(RED_PIN,GPIO.OUT)
GPIO.setup(BLUE_PIN,GPIO.OUT)
dht = adafruit_dht.DHT22(board.D4)
try:
    while True:
        try:
            tim = int(time.strftime("%M"))
            if temp_y[0] == 0:
                while True:
                    sleep(2)
                    temperature = dht.temperature
                    temp_y.pop(0)
                    temp_y.append(temperature)
                    humidity = dht.humidity
                    humid_y.pop(0)
                    humid_y.append(humidity)
                    update_graph()
                    root.update_idletasks()
                    root.update()
                    if temp_y[0]!=0:
                        break
            if (tim%5==0 and timset):
                timset=0
                temperature = dht.temperature
                temp_y.pop(0)
                temp_y.append(temperature)
                humidity = dht.humidity
                humid_y.pop(0)
                humid_y.append(humidity)
                update_graph()
                #Print what we got to the REPL
                print("Temp: {:.1f} *C \t Humidity: {}%".format(temperature, humidity))
                if auto:
                    if(temperature<21 and humidity>55):
                        msg_text.insert(tk.END, "It is too cold and too humid..\nTurning up heat...\nopen the window!\n")
                        GPIO.output(GREEN_PIN, GPIO.HIGH)
                        GPIO.output(RED_PIN, GPIO.HIGH)
                        GPIO.output(BLUE_PIN, GPIO.HIGH)
                    elif(temperature>21 and humidity>55):
                        msg_text.insert(tk.END, "Temperature is good, but its\ntoo humid...open the window!\n")
                        GPIO.output(GREEN_PIN, GPIO.HIGH)
                        GPIO.output(RED_PIN, GPIO.HIGH)
                        GPIO.output(BLUE_PIN, GPIO.HIGH)
                    elif(temperature<21 and humidity<55):
                        msg_text.insert(tk.END, "Humidity levels within range,\nbut temperature low...\nturning up heat!\n")
                        GPIO.output(GREEN_PIN, GPIO.HIGH)
                        GPIO.output(RED_PIN, GPIO.HIGH)
                        GPIO.output(BLUE_PIN, GPIO.HIGH)
                    else:
                        msg_text.insert(tk.END, "Temerature and humidity levels\nwithin range...\ngrow plants grow!\n")
                        GPIO.output(GREEN_PIN, GPIO.HIGH)
                        GPIO.output(RED_PIN, GPIO.HIGH)
                        GPIO.output(BLUE_PIN, GPIO.HIGH)
                    main()
            elif ((tim-1)%5==0):
                timset=1
        except RuntimeError as e:
        #Reading doesn't always work! Just print error and we'll try again
            print("Reading from DHT failure: ", e.args)
        root.update_idletasks()
        root.update()
except KeyboardInterrupt:
    print("all done")
    GPIO.output(GREEN_PIN, GPIO.LOW)
    GPIO.output(RED_PIN, GPIO.LOW)
    GPIO.output(BLUE_PIN, GPIO.LOW)
    GPIO.cleanup()
